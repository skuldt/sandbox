<!DOCTYPE html>

<meta name="viewport" content="width=device-width,initial-scale=1">
<meta charset="utf-8">

<head>

<link rel="stylesheet" type="text/css" href="./jim.css">

<style>

.link {
      fill: none;
      stroke: #666;
      stroke-width: 1.5px;
}

.link.licensing {
      stroke: red;
}

.link.resolved {
      stroke-dasharray: 0,2 1;
}

circle {
      fill: #ccc;
      stroke: #333;
      stroke-width: 1.5px;
}

text {
      font: 10px sans-serif;
      pointer-events: none;
      text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}
</style>

</head> 

<body class="device_frame">


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.1/d3.min.js"></script>
    <script>

function responsivefy(svg) {
        // get container + svg aspect ratio
        var container = d3.select(svg.node().parentNode),
                width = parseInt(svg.style("width")),
                height = parseInt(svg.style("height")),
                aspect = width / height;

        // add viewBox and preserveAspectRatio properties,
        // and call resize so that svg resizes on inital page load
                svg.attr("viewBox", "0 0 " + width + " " + height)
                .attr("perserveAspectRatio", "xMinYMid")
                .call(resize);

                // to register multiple listeners for same event type, 
                // you need to add namespace, i.e., 'click.foo'
                // necessary if you call invoke this function for multiple svgs
                // api docs: https://github.com/mbostock/d3/wiki/Selections#on
                d3.select(window).on("resize." + container.attr("id"), resize);

                // get width of container and resize svg to fit it
                function resize() {
                var targetWidth = parseInt(container.style("width"));
                                  svg.attr("width", targetWidth);
                                  svg.attr("height", Math.round(targetWidth / aspect));
                    }
}


// http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
var links = [
      {source: "apartment", target: "rent_$", type: "licensing"},
      {source: "apartment", target: "toilet", type: "licensing"},
      {source: "studio", target: "me", type: "suit"},
      {source: "hungry", target: "me", type: "suit"},
      {source: "job skillz", target: "me", type: "resolved"},
      {source: "toilet", target: "me", type: "suit"},
      {source: "cooking", target: "me", type: "suit"},
      {source: "apartment", target: "drippy", type: "suit"},
      {source: "apartment", target: "fishtank", type: "suit"},
      {source: "mice", target: "roommate_food", type: "suit"},
      {source: "me", target: "toilet", type: "suit"},
      {source: "apartment", target: "storage", type: "suit"},
      {source: "studio", target: "cooking", type: "resolved"},
      {source: "smells", target: "cooking", type: "resolved"},
      {source: "gas", target: "cooking", type: "suit"},
      {source: "vornado", target: "smells", type: "suit"},
      {source: "cooking", target: "smells", type: "resolved"},
      {source: "me", target: "job skillz", type: "resolved"},
      {source: "hmm", target: "job skillz", type: "resolved"},
      {source: "me", target: "hungry", type: "suit"},
      {source: "apartment", target: "hungry", type: "suit"},
      {source: "hungry", target: "apartment", type: "suit"},
      {source: "truck noise", target: "bed", type: "suit"},
      {source: "sleepy", target: "bed", type: "suit"},
      {source: "cooking", target: "studio", type: "resolved"},
      {source: "me", target: "studio", type: "suit"},
      {source: "cooking", target: "gas", type: "suit"},
      {source: "job skillz", target: "hmm", type: "suit"}
         ];

var nodes = {};

// Compute the distinct nodes from the links.
links.forEach(function(link) {
      link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
      link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
});

var width = 660,
    height = 500;

var force = d3.layout.force()
        .nodes(d3.values(nodes))
        .links(links)
        .size([width, height])
        .linkDistance(60)
        .charge(-300)
        .on("tick", tick)
        .start();


var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height)
        .call(responsivefy);

// Per-type markers, as they don't inherit styles.
     svg.append("defs").selectAll("marker")
        .data(["suit", "licensing", "resolved"])
        .enter().append("marker")
        .attr("id", function(d) { return d; })
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 15)
        .attr("refY", -1.5)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
        .append("path")
        .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("g").selectAll("path")
        .data(force.links())
        .enter().append("path")
        .attr("class", function(d) { return "link " + d.type; })
        .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

var circle = svg.append("g").selectAll("circle")
        .data(force.nodes())
        .enter().append("circle")
        .attr("r", 6)
        .call(force.drag);

var text = svg.append("g").selectAll("text")
                  .data(force.nodes())
      .enter().append("text")
          .attr("x", 8)
              .attr("y", ".31em")
                  .text(function(d) { return d.name; });

                  // Use elliptical arc path segments to doubly-encode directionality.
                  function tick() {
                        path.attr("d", linkArc);
                          circle.attr("transform", transform);
                            text.attr("transform", transform);
                  }

function linkArc(d) {
      var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
                  dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
}

function transform(d) {
      return "translate(" + d.x + "," + d.y + ")";
}

</script>
